
sockex1_kern.o:	file format ELF64-BPF


Disassembly of section socket1:

0000000000000000 bpf_prog1:
; {
       0:	bf 16 00 00 00 00 00 00	r6 = r1
; 	int length = skb->len;
       1:	61 67 00 00 00 00 00 00	r7 = *(u32 *)(r6 + 0)
; 	if(skb->len > 2000)
       2:	25 07 12 00 d0 07 00 00	if r7 > 2000 goto +18 <LBB0_4>
       3:	bf 71 00 00 00 00 00 00	r1 = r7
       4:	67 01 00 00 20 00 00 00	r1 <<= 32
       5:	c7 01 00 00 20 00 00 00	r1 s>>= 32
       6:	b7 02 00 00 01 00 00 00	r2 = 1
       7:	6d 12 0d 00 00 00 00 00	if r2 s> r1 goto +13 <LBB0_4>
       8:	b7 08 00 00 00 00 00 00	r8 = 0
       9:	b7 09 00 00 25 78 20 00	r9 = 2127909

0000000000000050 LBB0_3:
; 		char a = load_byte(skb, i);
      10:	50 80 00 00 00 00 00 00	r0 = *(u8 *)skb[r8]
;                 const char data[] = "%x ";
      11:	63 9a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r9
;                 bpf_trace_printk(data, sizeof(data), a);	
      12:	67 00 00 00 38 00 00 00	r0 <<= 56
      13:	c7 00 00 00 38 00 00 00	r0 s>>= 56
      14:	bf a1 00 00 00 00 00 00	r1 = r10
      15:	07 01 00 00 fc ff ff ff	r1 += -4
      16:	b7 02 00 00 04 00 00 00	r2 = 4
      17:	bf 03 00 00 00 00 00 00	r3 = r0
      18:	85 00 00 00 06 00 00 00	call 6
; 	for(int i = 0; i < length; i++){
      19:	07 08 00 00 01 00 00 00	r8 += 1
      20:	5d 87 f5 ff 00 00 00 00	if r7 != r8 goto -11 <LBB0_3>

00000000000000a8 LBB0_4:
; }
      21:	b7 00 00 00 00 00 00 00	r0 = 0
      22:	95 00 00 00 00 00 00 00	exit
