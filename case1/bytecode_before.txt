
sockex1_kern.o:	file format ELF64-BPF


Disassembly of section socket1:

0000000000000000 bpf_prog1:
       0:	bf 16 00 00 00 00 00 00	r6 = r1
       1:	30 00 00 00 17 00 00 00	r0 = *(u8 *)skb[23]
       2:	bf 08 00 00 00 00 00 00	r8 = r0
       3:	63 8a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r8
       4:	28 00 00 00 0c 00 00 00	r0 = *(u16 *)skb[12]
       5:	63 0a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r0
       6:	28 00 00 00 12 00 00 00	r0 = *(u16 *)skb[18]
       7:	63 0a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r0
       8:	30 00 00 00 0e 00 00 00	r0 = *(u8 *)skb[14]
       9:	bf 07 00 00 00 00 00 00	r7 = r0
      10:	63 7a f0 ff 00 00 00 00	*(u32 *)(r10 - 16) = r7
      11:	67 08 00 00 20 00 00 00	r8 <<= 32
      12:	77 08 00 00 20 00 00 00	r8 >>= 32
      13:	28 00 00 00 10 00 00 00	r0 = *(u16 *)skb[16]
      14:	63 0a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r0
      15:	55 08 05 00 01 00 00 00	if r8 != 1 goto +5 <LBB0_2>
      16:	67 07 00 00 02 00 00 00	r7 <<= 2
      17:	57 07 00 00 3c 00 00 00	r7 &= 60
      18:	07 07 00 00 16 00 00 00	r7 += 22
      19:	50 70 00 00 00 00 00 00	r0 = *(u8 *)skb[r7]
      20:	63 0a e8 ff 00 00 00 00	*(u32 *)(r10 - 24) = r0

00000000000000a8 LBB0_2:
      21:	61 61 04 00 00 00 00 00	r1 = *(u32 *)(r6 + 4)
      22:	55 01 30 00 04 00 00 00	if r1 != 4 goto +48 <LBB0_15>
      23:	bf a2 00 00 00 00 00 00	r2 = r10
      24:	07 02 00 00 fc ff ff ff	r2 += -4
      25:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      27:	85 00 00 00 01 00 00 00	call 1
      28:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_5>
      29:	b7 01 00 00 01 00 00 00	r1 = 1
      30:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

00000000000000f8 LBB0_5:
      31:	bf a2 00 00 00 00 00 00	r2 = r10
      32:	07 02 00 00 f8 ff ff ff	r2 += -8
      33:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      35:	85 00 00 00 01 00 00 00	call 1
      36:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_7>
      37:	b7 01 00 00 01 00 00 00	r1 = 1
      38:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

0000000000000138 LBB0_7:
      39:	bf a2 00 00 00 00 00 00	r2 = r10
      40:	07 02 00 00 f4 ff ff ff	r2 += -12
      41:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      43:	85 00 00 00 01 00 00 00	call 1
      44:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_9>
      45:	b7 01 00 00 01 00 00 00	r1 = 1
      46:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

0000000000000178 LBB0_9:
      47:	bf a2 00 00 00 00 00 00	r2 = r10
      48:	07 02 00 00 f0 ff ff ff	r2 += -16
      49:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      51:	85 00 00 00 01 00 00 00	call 1
      52:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_11>
      53:	b7 01 00 00 01 00 00 00	r1 = 1
      54:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

00000000000001b8 LBB0_11:
      55:	bf a2 00 00 00 00 00 00	r2 = r10
      56:	07 02 00 00 ec ff ff ff	r2 += -20
      57:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      59:	85 00 00 00 01 00 00 00	call 1
      60:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_13>
      61:	b7 01 00 00 01 00 00 00	r1 = 1
      62:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

00000000000001f8 LBB0_13:
      63:	bf a2 00 00 00 00 00 00	r2 = r10
      64:	07 02 00 00 e8 ff ff ff	r2 += -24
      65:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      67:	85 00 00 00 01 00 00 00	call 1
      68:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_15>
      69:	b7 01 00 00 01 00 00 00	r1 = 1
      70:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

0000000000000238 LBB0_15:
      71:	b7 00 00 00 00 00 00 00	r0 = 0
      72:	95 00 00 00 00 00 00 00	exit
