libbpf: load bpf program failed: Permission denied
libbpf: -- BEGIN DUMP LOG ---
libbpf: 
btf_vmlinux is malformed
Unrecognized arg#0 type PTR
; int bpf_prog1(struct __sk_buff *skb)
0: (bf) r6 = r1
; int index = load_byte(skb, ETH_HLEN + offsetof(struct iphdr, protocol));
1: (30) r0 = *(u8 *)skb[23]
2: (bf) r8 = r0
; int index = load_byte(skb, ETH_HLEN + offsetof(struct iphdr, protocol));
3: (63) *(u32 *)(r10 -4) = r8
; int index2 = load_half(skb, offsetof(struct ethhdr, h_proto));
4: (28) r0 = *(u16 *)skb[12]
; int index2 = load_half(skb, offsetof(struct ethhdr, h_proto));
5: (63) *(u32 *)(r10 -8) = r0
; int index3 = load_half(skb, ETH_HLEN + offsetof(struct iphdr, id));
6: (28) r0 = *(u16 *)skb[18]
; int index3 = load_half(skb, ETH_HLEN + offsetof(struct iphdr, id));
7: (63) *(u32 *)(r10 -12) = r0
; int index4 = load_byte(skb, ETH_HLEN);	
8: (30) r0 = *(u8 *)skb[14]
9: (bf) r7 = r0
; int index4 = load_byte(skb, ETH_HLEN);	
10: (63) *(u32 *)(r10 -16) = r7
; int index = load_byte(skb, ETH_HLEN + offsetof(struct iphdr, protocol));
11: (67) r8 <<= 32
12: (77) r8 >>= 32
; int index5 = load_half(skb, ETH_HLEN + offsetof(struct iphdr, tot_len));
13: (28) r0 = *(u16 *)skb[16]
; int index5 = load_half(skb, ETH_HLEN + offsetof(struct iphdr, tot_len));
14: (63) *(u32 *)(r10 -20) = r0
; if(index == IPPROTO_ICMP){
15: (55) if r8 != 0x1 goto pc+5

from 15 to 21: R0_w=inv(id=0) R6_w=ctx(id=0,off=0,imm=0) R7_w=inv(id=2) R8_w=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
; if (skb->pkt_type != PACKET_OUTGOING)
21: (61) r1 = *(u32 *)(r6 +4)
; if (skb->pkt_type != PACKET_OUTGOING)
22: (55) if r1 != 0x4 goto pc+48
 R0_w=inv(id=0) R1_w=inv4 R6_w=ctx(id=0,off=0,imm=0) R7_w=inv(id=2) R8_w=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
23: (bf) r2 = r10
; 
24: (07) r2 += -4
; value = bpf_map_lookup_elem(&my_map, &index);
25: (18) r1 = 0xffff9a7ed8148000
27: (85) call bpf_map_lookup_elem#1
; if (value)
28: (15) if r0 == 0x0 goto pc+2
 R0=map_value(id=0,off=0,ks=4,vs=8,imm=0) R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
29: (b7) r1 = 1
; __sync_fetch_and_add(value, 1);
30: (db) lock *(u64 *)(r0 +0) += r1
 R0=map_value(id=0,off=0,ks=4,vs=8,imm=0) R1_w=inv1 R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
 R0=map_value(id=0,off=0,ks=4,vs=8,imm=0) R1_w=inv1 R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
31: (bf) r2 = r10
; 
32: (07) r2 += -8
; value2 = bpf_map_lookup_elem(&my_map2, &index2);
33: (18) r1 = 0xffffb8da42f51000
35: (85) call bpf_map_lookup_elem#1
; if (value2)
36: (15) if r0 == 0x0 goto pc+2
 R0_w=map_value(id=0,off=0,ks=4,vs=8,imm=0) R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
37: (b7) r1 = 1
; __sync_fetch_and_add(value2, 1);
38: (db) lock *(u64 *)(r0 +0) += r1
 R0_w=map_value(id=0,off=0,ks=4,vs=8,imm=0) R1_w=inv1 R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
 R0_w=map_value(id=0,off=0,ks=4,vs=8,imm=0) R1_w=inv1 R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
39: (bf) r2 = r10
; 
40: (07) r2 += -12
; value3 = bpf_map_lookup_elem(&my_map3, &index3);
41: (18) r1 = 0xffffb8da4309e000
43: (85) call bpf_map_lookup_elem#1
; if (value3)
44: (15) if r0 == 0x0 goto pc+2
 R0_w=map_value(id=0,off=0,ks=4,vs=8,imm=0) R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
45: (b7) r1 = 1
; __sync_fetch_and_add(value3, 1);	
46: (db) lock *(u64 *)(r0 +0) += r1
 R0_w=map_value(id=0,off=0,ks=4,vs=8,imm=0) R1_w=inv1 R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
 R0_w=map_value(id=0,off=0,ks=4,vs=8,imm=0) R1_w=inv1 R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
47: (bf) r2 = r10
; 
48: (07) r2 += -16
; value4 = bpf_map_lookup_elem(&my_map4, &index4);
49: (18) r1 = 0xffff9a7ed814f000
51: (85) call bpf_map_lookup_elem#1
; if(value4)
52: (15) if r0 == 0x0 goto pc+2
 R0=map_value(id=0,off=0,ks=4,vs=8,imm=0) R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
53: (b7) r1 = 1
; __sync_fetch_and_add(value4, 1);
54: (db) lock *(u64 *)(r0 +0) += r1
 R0=map_value(id=0,off=0,ks=4,vs=8,imm=0) R1_w=inv1 R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
 R0=map_value(id=0,off=0,ks=4,vs=8,imm=0) R1_w=inv1 R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
55: (bf) r2 = r10
; 
56: (07) r2 += -20
; value5 = bpf_map_lookup_elem(&my_map5, &index5);
57: (18) r1 = 0xffffb8da43149000
59: (85) call bpf_map_lookup_elem#1
; if(value5)
60: (15) if r0 == 0x0 goto pc+2
 R0_w=map_value(id=0,off=0,ks=4,vs=8,imm=0) R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
61: (b7) r1 = 1
; __sync_fetch_and_add(value5, 1);
62: (db) lock *(u64 *)(r0 +0) += r1
 R0_w=map_value(id=0,off=0,ks=4,vs=8,imm=0) R1_w=inv1 R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
 R0_w=map_value(id=0,off=0,ks=4,vs=8,imm=0) R1_w=inv1 R6=ctx(id=0,off=0,imm=0) R7=inv(id=2) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R10=fp0 fp-8=mmmmmmmm fp-16=mmmmmmmm fp-24=mmmm????
63: (bf) r2 = r10
; 
64: (07) r2 += -24
; value6 = bpf_map_lookup_elem(&my_map6, &index6);
65: (18) r1 = 0xffffb8da43381000
67: (85) call bpf_map_lookup_elem#1
invalid indirect read from stack R2 off -24+0 size 4
processed 136 insns (limit 1000000) max_states_per_insn 1 total_states 11 peak_states 11 mark_read 3

libbpf: -- END LOG --
libbpf: failed to load program 'socket1'
libbpf: failed to load object './sockex1_kern.o'

