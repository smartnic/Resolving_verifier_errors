
sockex1_kern.o:	file format ELF64-BPF


Disassembly of section socket1:

0000000000000000 bpf_prog1:
       0:	bf 16 00 00 00 00 00 00	r6 = r1
       1:	30 00 00 00 17 00 00 00	r0 = *(u8 *)skb[23]
       2:	bf 08 00 00 00 00 00 00	r8 = r0
       3:	63 8a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r8
       4:	28 00 00 00 0c 00 00 00	r0 = *(u16 *)skb[12]
       5:	63 0a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r0
       6:	28 00 00 00 12 00 00 00	r0 = *(u16 *)skb[18]
       7:	63 0a f4 ff 00 00 00 00	*(u32 *)(r10 - 12) = r0
       8:	30 00 00 00 0e 00 00 00	r0 = *(u8 *)skb[14]
       9:	bf 07 00 00 00 00 00 00	r7 = r0
      10:	63 7a f0 ff 00 00 00 00	*(u32 *)(r10 - 16) = r7
      11:	28 00 00 00 10 00 00 00	r0 = *(u16 *)skb[16]
      12:	63 0a ec ff 00 00 00 00	*(u32 *)(r10 - 20) = r0
      13:	b7 01 00 00 00 00 00 00	r1 = 0
      14:	63 1a e8 ff 00 00 00 00	*(u32 *)(r10 - 24) = r1
      15:	67 08 00 00 20 00 00 00	r8 <<= 32
      16:	77 08 00 00 20 00 00 00	r8 >>= 32
      17:	55 08 05 00 01 00 00 00	if r8 != 1 goto +5 <LBB0_2>
      18:	67 07 00 00 02 00 00 00	r7 <<= 2
      19:	57 07 00 00 3c 00 00 00	r7 &= 60
      20:	07 07 00 00 16 00 00 00	r7 += 22
      21:	50 70 00 00 00 00 00 00	r0 = *(u8 *)skb[r7]
      22:	63 0a e8 ff 00 00 00 00	*(u32 *)(r10 - 24) = r0

00000000000000b8 LBB0_2:
      23:	61 61 04 00 00 00 00 00	r1 = *(u32 *)(r6 + 4)
      24:	55 01 30 00 04 00 00 00	if r1 != 4 goto +48 <LBB0_15>
      25:	bf a2 00 00 00 00 00 00	r2 = r10
      26:	07 02 00 00 fc ff ff ff	r2 += -4
      27:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      29:	85 00 00 00 01 00 00 00	call 1
      30:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_5>
      31:	b7 01 00 00 01 00 00 00	r1 = 1
      32:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

0000000000000108 LBB0_5:
      33:	bf a2 00 00 00 00 00 00	r2 = r10
      34:	07 02 00 00 f8 ff ff ff	r2 += -8
      35:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      37:	85 00 00 00 01 00 00 00	call 1
      38:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_7>
      39:	b7 01 00 00 01 00 00 00	r1 = 1
      40:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

0000000000000148 LBB0_7:
      41:	bf a2 00 00 00 00 00 00	r2 = r10
      42:	07 02 00 00 f4 ff ff ff	r2 += -12
      43:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      45:	85 00 00 00 01 00 00 00	call 1
      46:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_9>
      47:	b7 01 00 00 01 00 00 00	r1 = 1
      48:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

0000000000000188 LBB0_9:
      49:	bf a2 00 00 00 00 00 00	r2 = r10
      50:	07 02 00 00 f0 ff ff ff	r2 += -16
      51:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      53:	85 00 00 00 01 00 00 00	call 1
      54:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_11>
      55:	b7 01 00 00 01 00 00 00	r1 = 1
      56:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

00000000000001c8 LBB0_11:
      57:	bf a2 00 00 00 00 00 00	r2 = r10
      58:	07 02 00 00 ec ff ff ff	r2 += -20
      59:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      61:	85 00 00 00 01 00 00 00	call 1
      62:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_13>
      63:	b7 01 00 00 01 00 00 00	r1 = 1
      64:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

0000000000000208 LBB0_13:
      65:	bf a2 00 00 00 00 00 00	r2 = r10
      66:	07 02 00 00 e8 ff ff ff	r2 += -24
      67:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      69:	85 00 00 00 01 00 00 00	call 1
      70:	15 00 02 00 00 00 00 00	if r0 == 0 goto +2 <LBB0_15>
      71:	b7 01 00 00 01 00 00 00	r1 = 1
      72:	db 10 00 00 00 00 00 00	lock *(u64 *)(r0 + 0) += r1

0000000000000248 LBB0_15:
      73:	b7 00 00 00 00 00 00 00	r0 = 0
      74:	95 00 00 00 00 00 00 00	exit
